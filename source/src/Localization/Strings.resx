<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BtnAddEdge" xml:space="preserve">
    <value>Add Edge</value>
  </data>
  <data name="BtnAddNode" xml:space="preserve">
    <value>Add Node</value>
  </data>
  <data name="BtnClear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="BtnCreat" xml:space="preserve">
    <value>Creat</value>
  </data>
  <data name="BtnEditEdge" xml:space="preserve">
    <value>Edit Edge</value>
  </data>
  <data name="BtnEraseEdge" xml:space="preserve">
    <value>Erase Edge</value>
  </data>
  <data name="BtnEraseNode" xml:space="preserve">
    <value>Erase Node</value>
  </data>
  <data name="BtnHideInput" xml:space="preserve">
    <value>Hide Input</value>
  </data>
  <data name="BtnRun" xml:space="preserve">
    <value>Run</value>
  </data>
  <data name="BtnSelect" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="BtnSelectSink" xml:space="preserve">
    <value>Select Sink(s)</value>
  </data>
  <data name="BtnSelectSource" xml:space="preserve">
    <value>Select Source(s)</value>
  </data>
  <data name="BtnShowInput" xml:space="preserve">
    <value>Show Input</value>
  </data>
  <data name="LabelChooseTest" xml:space="preserve">
    <value>Choose Test Case:</value>
  </data>
  <data name="LabelDemand" xml:space="preserve">
    <value>Demand</value>
  </data>
  <data name="LabelInput" xml:space="preserve">
    <value>INPUT</value>
  </data>
  <data name="LabelLanguage" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="LabelMaxFlow" xml:space="preserve">
    <value>Max Flow: ---</value>
  </data>
  <data name="LabelSupply" xml:space="preserve">
    <value>Supply</value>
  </data>
  <data name="MsgMoveNode" xml:space="preserve">
    <value>You can move the nodes to make them easier to see...</value>
  </data>
  <data name="NavHome" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="NavMaxFlowSimulator" xml:space="preserve">
    <value>Max Flow Simulator</value>
  </data>
  <data name="NavTransportation" xml:space="preserve">
    <value>Transportation Problem</value>
  </data>
  <data name="OptionAutoBanlance" xml:space="preserve">
    <value>Automatic supply/demand banlance</value>
  </data>
  <data name="OptionColorByFlow" xml:space="preserve">
    <value>Color by Flow</value>
  </data>
  <data name="OptionEnableAimation" xml:space="preserve">
    <value>Enable Animation</value>
  </data>
  <data name="TextAbout" xml:space="preserve">
    <value>We are a team of students passionate about applying Discrete Mathematics 
to practical problems. This project focuses on visualizing 
the Edmonds-Karp (Max Flow) algorithm, allowing users to 
easily input data, view results, and understand how network flow 
theory works in practice.

The application also demonstrates real-life uses of maximum flow, such as in transportation, 
logistics, and communication networks, making abstract concepts more accessible and engaging.
</value>
  </data>
  <data name="titleAboutUs" xml:space="preserve">
    <value>About Us</value>
  </data>
  <data name="TitleExample1" xml:space="preserve">
    <value>Example : 50,40,5</value>
  </data>
  <data name="TitleExample2" xml:space="preserve">
    <value>Example :20,10,60</value>
  </data>
  <data name="TitleExample3" xml:space="preserve">
    <value>Enter a non-negative interger.</value>
  </data>
  <data name="TitleGroup11" xml:space="preserve">
    <value>GROUP 11</value>
  </data>
  <data name="TitleMaxFlow" xml:space="preserve">
    <value>Maximum Flow = --</value>
  </data>
</root>